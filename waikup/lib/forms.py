# -*- coding: utf-8 -*-

from flask import flash
from flask_wtf import FlaskForm
from wtforms import TextAreaField, PasswordField, SelectField, StringField, IntegerField
from wtforms.fields.html5 import URLField
from wtforms.validators import url, required, optional, equal_to, ValidationError

from .. import settings
from .models import Category


def is_category(_, field):
    """
    Checks if given field value is a valid category.
    :param field: field object to check
    :return: None (or raises ValidationError)
    """
    try:
        Category.get(Category.name == field.data)
    except Category.DoesNotExist:
        raise ValidationError("Invalid category")


def flash_form_errors(form, category=None):
    """
    Flashes all the errors generated by given form.
    :param form: the form object for which flash messages should be generated.
    :param category: category to which the alert belongs
    :return: None
    """
    if category is None:
        category = 'error'
    for field_name, field_errors in form.errors.iteritems():
        for field_error in field_errors:
            flash("%s (field: %s)" % (field_error, field_name), category=category)


class FormWithCategory(FlaskForm):
    """
    Base Form class for forms that have a category field.
    """
    category = SelectField(
        'Category',
        validators=[optional(), is_category],
        default=settings.DEFAULT_CATEGORY
    )

    def set_category_choices(self):
        """
        Dynamically sets the available categories.
        :return:
        """
        self.category.choices = [(c.name, c.name) for c in Category.select()]


class SimpleLinkForm(FlaskForm):
    """
    Form for cases where only the field's id is needed (convenience form to benefit from CSRF protection).
    """
    link_id = IntegerField(validators=[required()])


class NewLinkForm(FormWithCategory):
    """
    Form for creating new links.
    """
    name = 'new-link'
    endpoint = 'main.new_link'
    url = URLField(
        'URL',
        validators=[url(), required()]
    )
    title = StringField(
        'Title',
        validators=[required()]
    )
    description = TextAreaField(
        'Description',
        validators=[required()]
    )


class ChangePasswordForm(FlaskForm):
    """
    Form for user password changes.
    """
    name = 'chpasswd'
    endpoint = 'main.change_password'
    current = PasswordField(
        'Current password',
        validators=[required()]
    )
    new = PasswordField(
        'New password',
        validators=[required()]
    )
    confirm = PasswordField(
        'Confirm password',
        validators=[required(), equal_to('new', message="Passwords don't match")]
    )


class EditLinkForm(FormWithCategory):
    """
    Form for when editing a link.
    """
    name = 'edit-link'
    endpoint = 'main.edit_link'
    url = URLField(
        'URL',
        validators=[url(), required()]
    )
    title = StringField(
        'Title',
        validators=[required()]
    )
    description = TextAreaField(
        'Description',
        validators=[required()]
    )
